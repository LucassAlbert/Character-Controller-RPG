//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Scripts/Player/Input/Camera.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Camm : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Camm()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Camera"",
    ""maps"": [
        {
            ""name"": ""Camera_Input"",
            ""id"": ""dad59ae7-1c90-4e2f-ae5b-760beddd18a3"",
            ""actions"": [
                {
                    ""name"": ""Girar"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b9dad9fb-2247-4143-af8d-5b8be09f8338"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GirarControle"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fae278bb-9817-4782-9be0-d0723b9673fd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6b372617-2733-4f24-b95e-88e549fea513"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Girar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""controler"",
                    ""id"": ""d1d1d913-eb38-4159-b3bb-47b0b3e0db89"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Girar"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""89f4e6e8-5647-4889-af63-bccc9ab93e77"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Girar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6433c2cf-fc42-4c43-903b-f2b39de6a1c5"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Girar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""81396b6e-b429-4931-8466-0cea177fd3bf"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GirarControle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8638154b-4cdd-4a12-b030-f8fb039a237d"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GirarControle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Camera_Input
        m_Camera_Input = asset.FindActionMap("Camera_Input", throwIfNotFound: true);
        m_Camera_Input_Girar = m_Camera_Input.FindAction("Girar", throwIfNotFound: true);
        m_Camera_Input_GirarControle = m_Camera_Input.FindAction("GirarControle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera_Input
    private readonly InputActionMap m_Camera_Input;
    private ICamera_InputActions m_Camera_InputActionsCallbackInterface;
    private readonly InputAction m_Camera_Input_Girar;
    private readonly InputAction m_Camera_Input_GirarControle;
    public struct Camera_InputActions
    {
        private @Camm m_Wrapper;
        public Camera_InputActions(@Camm wrapper) { m_Wrapper = wrapper; }
        public InputAction @Girar => m_Wrapper.m_Camera_Input_Girar;
        public InputAction @GirarControle => m_Wrapper.m_Camera_Input_GirarControle;
        public InputActionMap Get() { return m_Wrapper.m_Camera_Input; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Camera_InputActions set) { return set.Get(); }
        public void SetCallbacks(ICamera_InputActions instance)
        {
            if (m_Wrapper.m_Camera_InputActionsCallbackInterface != null)
            {
                @Girar.started -= m_Wrapper.m_Camera_InputActionsCallbackInterface.OnGirar;
                @Girar.performed -= m_Wrapper.m_Camera_InputActionsCallbackInterface.OnGirar;
                @Girar.canceled -= m_Wrapper.m_Camera_InputActionsCallbackInterface.OnGirar;
                @GirarControle.started -= m_Wrapper.m_Camera_InputActionsCallbackInterface.OnGirarControle;
                @GirarControle.performed -= m_Wrapper.m_Camera_InputActionsCallbackInterface.OnGirarControle;
                @GirarControle.canceled -= m_Wrapper.m_Camera_InputActionsCallbackInterface.OnGirarControle;
            }
            m_Wrapper.m_Camera_InputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Girar.started += instance.OnGirar;
                @Girar.performed += instance.OnGirar;
                @Girar.canceled += instance.OnGirar;
                @GirarControle.started += instance.OnGirarControle;
                @GirarControle.performed += instance.OnGirarControle;
                @GirarControle.canceled += instance.OnGirarControle;
            }
        }
    }
    public Camera_InputActions @Camera_Input => new Camera_InputActions(this);
    public interface ICamera_InputActions
    {
        void OnGirar(InputAction.CallbackContext context);
        void OnGirarControle(InputAction.CallbackContext context);
    }
}
